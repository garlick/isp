.\" Copyright (C) 2005 The Regents of the University of California.
.\" Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
.\" Written by Jim Garlick <garlick@llnl.gov>.
.\"
.\" This file is part of ISP, a toolkit for constructing pipeline applications.
.\" For details, see <http://isp.sourceforge.net>.
.\"
.\" ISP is free software; you can redistribute it and/or modify it under
.\" the terms of the GNU General Public License as published by the Free
.\" Software Foundation; either version 2 of the License, or (at your option)
.\" any later version.
.\"
.\" ISP is distributed in the hope that it will be useful, but WITHOUT ANY
.\" WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
.\" FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
.\" details.
.\"
.\" You should have received a copy of the GNU General Public License along
.\" with ISP; if not, write to the Free Software Foundation, Inc.,
.\" 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
.TH ISP_INIT 3  2005-03-23 "" "Industrial Strength Pipes"
.SH NAME
isp_init, isp_fini \- initialize/finalize isp library
.SH SYNOPSIS
.nf
.B #include <isp/isp.h>
.sp
.BI "int isp_init(isp_handle_t *" h ", int " flags ", int " argc ", char **" argv ","
.BI "             struct isp_stab_struct " stab[] ", int " splitfactor ");"
.sp
.BI "int isp_fini(isp_handle_t " h ");"
.fi
.SH DESCRIPTION
\fBisp_init()\fR initializes the ISP library and creates a handle 
\fIh\fR for I/O on stdin and stdout. 
.PP
\fBisp_fini()\fR destroyes the handle created by \fBisp_init()\fR and
finalizes the ISP library.
.PP
\fIflags\fR should be zero or the 
logical \`\`or\'\' of one or more of following:
.TP
ISP_SOURCE
Indicates filter will produce output on stdout.
.TP
ISP_SINK
Indicates filter will accept input on stdin.
.TP
ISP_IGNERR
Normally a map function will not execute on units with upstream result 
codes != ISP_ESUCCESS.  This flag causes upstream result codes to be ignored.
.TP
ISP_PREPARSE
read stdin to EOF before \fBisp_init()\fR returns, storing the XML in memory.
.PP
\fIargc\fR and \fIargv\fR are the calling program\'s arguments so that ISP
can record the arguments for data provenance purposes.  They are not modified
by ISP.
.PP
\fIstab\fR is an array of symbol table entries, terminated by an entry
with NULL name field.  The entries are defined as follows:
.PP
.nf
struct isp_stab_struct {
    char        *name;
    isp_type_t   type;
    int          flags;
};
.fi
.PP
where \fIname\fR is the name of a key; \fItype\fR is the key type 
(one of ISP_FILE, ISP_DOUBLE, ISP_UINT64, or ISP_INT64);
and \fIflags\fR is a zero or the logical ``or'' of one or more of the
following:
.TP
ISP_PROVIDES
Indicates the filter will add the key to each unit.
.TP
ISP_REQUIRES
Indicates the filter will read the key from each unit.
.TP
ISP_REMOVES
Indicates the filter will remove the key from each unit.
.PP
\fIsplitfactor\fR is the ratio of units written to unit read, normally 1.
.SH ENVIRONMENT
In addition, \fBisp_init()\fR sets internal flags based on the following
environment variables:
.TP
setenv ISP_MD5CHECK 1
Associate an MD5 digest with every file reference, and regenerate and check 
it at appropriate times.  Can be time consuming on large files.
.TP
setenv ISP_DBGFAIL 1
Request ISP functions to send verbose debugging information to stderr when 
returning failure.
.SH "RETURN VALUE"
\fBisp_init()\fR returns ISP_ESUCCESS (0) on success.
A nonzero error code which can be decoded with \fBisp_errstr()\fR is returned
on failure.
.SH "SEE ALSO"
.BR isp_errstr (3)
