.\" Copyright (C) 2005 The Regents of the University of California.
.\" Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
.\" Written by Jim Garlick <garlick@llnl.gov>.
.\"
.\" This file is part of ISP, a toolkit for constructing pipeline applications.
.\" For details, see <http://isp.sourceforge.net>.
.\"
.\" ISP is free software; you can redistribute it and/or modify it under
.\" the terms of the GNU General Public License as published by the Free
.\" Software Foundation; either version 2 of the License, or (at your option)
.\" any later version.
.\"
.\" ISP is distributed in the hope that it will be useful, but WITHOUT ANY
.\" WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
.\" FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
.\" details.
.\"
.\" You should have received a copy of the GNU General Public License along
.\" with ISP; if not, write to the Free Software Foundation, Inc.,
.\" 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
.TH ISP_ERRSTR 3  2005-03-23 "" "Industrial Strength Pipes"
.SH NAME
isp_errstr \- convert ISP error code to string
.SH SYNOPSIS
.nf
.B #include <isp/isp.h>
.sp
.BI "char * isp_errstr(int " errnum ");"
.fi
.SH DESCRIPTION
\fBisp_errstr()\fR looks up a numerical isp error code \fIerrnum\fR and returns
a pointer to a static string description.  Possible ISP error codes are listed
below:
.TP
ISP_ESUCCESS        0   /* Success */
.TP
ISP_ENOTRUN         1   /* No result */
.TP
ISP_ENOKEY          2   /* File/metadata key lookup failed */
.TP
ISP_EDUPKEY         3   /* File/metadata key already exists */
.TP
ISP_ECORRUPT        4   /* File corruption detected */
.TP
ISP_ENOENT          5   /* File does not exist */
.TP
ISP_EEXITED         6   /* Subprocess exited with nonzero status */
.TP
ISP_ESIGNAL         7   /* Subprocess died on signal */
.TP
ISP_ESTOPPED        8   /* Subprocess was stopped */
.TP
ISP_EWAIT           9   /* Wait for subprocess failed */
.TP
ISP_EEOF            10  /* EOF on read */
.TP
ISP_EREAD           11  /* Read error */
.TP
ISP_EWRITE          12  /* Write error */
.TP
ISP_EWOULDBLOCK     13  /* Read operation would block */
.TP
ISP_ENOMEM          14  /* Out of memory */
.TP
ISP_EFCNTL          15  /* Fcntl error */
.TP
ISP_EPARSE          16  /* XML parse error */
.TP
ISP_EPOLL           17  /* Poll error */
.TP
ISP_ENOTCLOSED      18  /* XML document is still open */
.TP
ISP_ETIME           19  /* Gettimeofday error */
.TP
ISP_EMKTMP          20  /* mktmp error */
.TP
ISP_ECOPY           21  /* error copying file */
.TP
ISP_EREDIRECT       22  /* redirection error */
.TP
ISP_EFORK           23  /* fork error */
.TP
ISP_EEXEC           24  /* exec error */
.TP
ISP_EPIPE           25  /* pipe error */
.TP
ISP_ERENAME         26  /* rename error */
.TP
ISP_EATTR           27  /* XML attribute error */
.TP
ISP_EINVAL          28  /* invalid arguments */
.TP
ISP_ENOINIT         29  /* ISP not initialized yet */
.TP
ISP_EELEMENT        30  /* malformed ISP element */
.TP
ISP_EGETCWD         31  /* getcwd failure */
.TP
ISP_EBADF           32  /* I/O to a bad handle */
.TP
ISP_ERWFILE         33  /* Unit contains unsinked read-write files */
.TP
ISP_EDOCUMENT       34  /* Malformed ISP document */
.TP
ISP_EBIND           35  /* Pipeline binding error */
.TP
ISP_EUSERFAIL       1024  /* Application generic fatal error */
.TP
ISP_EUSER           1025  /* Application generic non-fatal error */
.PP
.SH "RETURN VALUE"
\fBisp_errstr()\fR returns a pointer to a static error string.
It should always succede.  An out of range error code will trigger
an assertion failure in the library.
